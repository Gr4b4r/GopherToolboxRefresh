// <auto-generated />
using System;
using GopherToolboxRefresh.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Projekt.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240714144203_UIunification")]
    partial class UIunification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("GopherToolboxRefresh.Models.CancelRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("CancelRequests");
                });

            modelBuilder.Entity("GopherToolboxRefresh.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CancellationRequested")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("QuestDateEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("QuestDateStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GopherToolboxRefresh.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentOccupiedSlots")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("QuestDateEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("QuestDateStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("SlotLimit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Quests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Międzynarodowe Targi Poznańskie, Głogowska 4, Poznań",
                            City = "Poznań",
                            CurrentOccupiedSlots = 0,
                            Description = "Quest polega na zajmowaniu się dziećmi w wieku poniżej 13 roku życia. Jako główne cechy oczekujemy, życzliwości i umiejętności opieki nad najmłodszymi uczestnikami konwentu :)",
                            ImageUrl = "/images/1.jpg",
                            Name = "Pyrkon - Bejbiczki",
                            QuestDateEnd = new DateTime(2025, 6, 15, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2025, 6, 13, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 20
                        },
                        new
                        {
                            Id = 2,
                            Address = "Międzynarodowe Targi Poznańskie, Głogowska 4, Poznań",
                            City = "Poznań",
                            CurrentOccupiedSlots = 0,
                            Description = "Quest polega na udzielaniu pomocy gościom oraz prowadzącym sesje RPG",
                            ImageUrl = "/images/1.jpg",
                            Name = "Pyrkon - RPG",
                            QuestDateEnd = new DateTime(2025, 6, 15, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2025, 6, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 40
                        },
                        new
                        {
                            Id = 3,
                            Address = "Międzynarodowe Targi Poznańskie, Głogowska 4",
                            City = "Poznań",
                            CurrentOccupiedSlots = 0,
                            Description = "Quest polega na wypożyczaniu oraz odbieraniu gier w wypożyczalni. Wymagamy podstawowej wiedzy z zakresu gier planszowych oraz chęci do nauki nowych gier.",
                            ImageUrl = "/images/1.jpg",
                            Name = "Pyrkon - Wypożyczalnia",
                            QuestDateEnd = new DateTime(2025, 6, 15, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2025, 6, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 30
                        },
                        new
                        {
                            Id = 4,
                            Address = "Liceum Ogólnokształące Mistrzostwa Sporotowego im. Poznańskich Olimpijczyków, Osiedle Tysiąclecia 43",
                            City = "Poznań",
                            CurrentOccupiedSlots = 0,
                            Description = "Opieka nad sceną, czyli pomoc występującym, szybkie sprzątanie pomiędzy występami",
                            ImageUrl = "/images/2.jpg",
                            Name = "AnimeCon - Opieka Sceny",
                            QuestDateEnd = new DateTime(2024, 10, 31, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2024, 10, 31, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 10
                        },
                        new
                        {
                            Id = 5,
                            Address = "Liceum Ogólnokształące Mistrzostwa Sporotowego im. Poznańskich Olimpijczyków, Osiedle Tysiąclecia 43",
                            City = "Poznań",
                            CurrentOccupiedSlots = 0,
                            Description = "Prowadzenie akry",
                            ImageUrl = "/images/2.jpg",
                            Name = "AnimeCon - Akra",
                            QuestDateEnd = new DateTime(2024, 10, 31, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2024, 10, 31, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 5
                        },
                        new
                        {
                            Id = 6,
                            Address = "Collegium Da Vinci, Kutrzeby 10, Poznań",
                            City = "Poznań",
                            CurrentOccupiedSlots = 0,
                            Description = "Zajmowanie się terenem plenerowym aby były na bierząco dostarczane przedmioty do prowadzących",
                            ImageUrl = "/images/3.png",
                            Name = "Hikari - Plener",
                            QuestDateEnd = new DateTime(2024, 8, 18, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2024, 8, 16, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 15
                        },
                        new
                        {
                            Id = 7,
                            Address = "Collegium Da Vinci, Kutrzeby 10, Poznań",
                            City = "Poznań",
                            CurrentOccupiedSlots = 0,
                            Description = "Administracja sceną, wpuszczanie oraz informowanie o zejscu ze sceny",
                            ImageUrl = "/images/3.png",
                            Name = "Hikari - Scena",
                            QuestDateEnd = new DateTime(2024, 8, 18, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2024, 8, 16, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 10
                        },
                        new
                        {
                            Id = 8,
                            Address = "Hotel Novotel Marina, Jelitkowska 20, 80-342 Gdańsk",
                            City = "Gdańsk",
                            CurrentOccupiedSlots = 0,
                            Description = "Pomoc pracownikom ZTM Gdańsk przy ładowaniu oraz rozładowaniu pasażerów, podróżujących pomiędzy Hotelem a eventem w Plenerze",
                            ImageUrl = "/images/4.png",
                            Name = "Gdakon - Wsparcie ZTM Hotel",
                            QuestDateEnd = new DateTime(2025, 3, 1, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2025, 2, 23, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 5
                        },
                        new
                        {
                            Id = 9,
                            Address = "Hotel Novotel Marina, Jelitkowska 20, 80-342 Gdańsk",
                            City = "Gdańsk",
                            CurrentOccupiedSlots = 0,
                            Description = "Pomoc pracownikom ZTM Gdańsk przy ładowaniu oraz rozładowaniu pasażerów, podróżujących pomiędzy Hotelem a eventem w Plenerze",
                            ImageUrl = "/images/4.png",
                            Name = "Gdakon - Wsparcie ZTM Plener",
                            QuestDateEnd = new DateTime(2025, 2, 28, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2025, 2, 23, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 5
                        },
                        new
                        {
                            Id = 10,
                            Address = "Hotel Novotel Marina, Jelitkowska 20, 80-342 Gdańsk",
                            City = "Gdańsk",
                            CurrentOccupiedSlots = 0,
                            Description = "Prowadzenie akredytacji oraz pomoc przy odbiorach identyfikatorów",
                            ImageUrl = "/images/4.png",
                            Name = "Gdakon - Akredytacja",
                            QuestDateEnd = new DateTime(2025, 2, 28, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            QuestDateStart = new DateTime(2025, 2, 23, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SlotLimit = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rola")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Userdata", b =>
                {
                    b.Property<int>("UserDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserDataId");

                    b.HasIndex("QuestId");

                    b.HasIndex("UserId");

                    b.ToTable("Userdata");
                });

            modelBuilder.Entity("GopherToolboxRefresh.Models.CancelRequest", b =>
                {
                    b.HasOne("GopherToolboxRefresh.Models.Order", "Order")
                        .WithOne("CancelRequest")
                        .HasForeignKey("GopherToolboxRefresh.Models.CancelRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GopherToolboxRefresh.Models.Order", b =>
                {
                    b.HasOne("GopherToolboxRefresh.Models.Quest", "Quest")
                        .WithMany("UserQuests")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Userdata", b =>
                {
                    b.HasOne("GopherToolboxRefresh.Models.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Userdatas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GopherToolboxRefresh.Models.Order", b =>
                {
                    b.Navigation("CancelRequest");
                });

            modelBuilder.Entity("GopherToolboxRefresh.Models.Quest", b =>
                {
                    b.Navigation("UserQuests");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Userdatas");
                });
#pragma warning restore 612, 618
        }
    }
}
